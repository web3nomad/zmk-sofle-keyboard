#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};


/ {

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE   &kp N1    &kp N2    &kp N3    &kp N4     &kp N5        &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp BACKSPACE
&kp TAB     &kp Q     &kp W     &kp E     &kp R      &kp T         &kp DOWN_ARROW   &kp Y      &kp U      &kp I      &kp O     &kp P     &kp BSLH
&kp LSHIFT  &kp A     &kp S     &kp D     &kp F      &kp G         &kp LEFT_ARROW   &kp H      &kp J      &kp K      &kp L     &kp SEMI  &kp APOS
&kp LCTRL   &kp Z     &kp X     &kp C     &kp V      &kp B         &kp RIGHT_ARROW  &kp N      &kp M      &kp COMMA  &kp DOT   &kp FSLH  &trans
&kp C_MUTE  &mo 1     &kp LALT  &kp LGUI  &kp SPACE  &kp ESCAPE    &kp ENTER        &kp ENTER  &kp SPACE  &mo 1      &kp RGUI  &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "layer0";
        };

        layer1 {
            bindings = <
&trans      &trans  &trans     &trans     &trans     &trans    &mmv MOVE_UP     &trans     &trans          &trans    &kp MINUS  &kp EQUAL  &trans
&trans      &trans  &trans     &trans     &trans     &trans    &mmv MOVE_DOWN   &kp PG_UP  &trans          &kp UP    &kp LBKT   &kp RBKT   &trans
&kp CAPS    &trans  &trans     &trans     &trans     &trans    &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &trans     &trans
&trans      &trans  &trans     &trans     &trans     &trans    &mmv MOVE_RIGHT  &trans     &trans          &trans    &trans     &trans     &mo 2
&kp C_MUTE  &trans  &trans     &trans     &trans     &trans    &mkp LCLK        &trans     &trans          &trans    &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer2 {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans           &trans           &trans           &trans           &trans           &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans           &trans           &trans           &trans           &trans           &trans
&trans  &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &rgb_ug RGB_OFF  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &trans
&trans  &sys_reset    &soft_off       &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &trans
&trans  &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans           &trans           &trans           &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN>;
            label = "layer2";
        };
    };
};
